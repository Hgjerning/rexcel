#summary Low-level API description.

<wiki:toc max_depth="3" /> 

Using the low-level functions gives you the ability to control what
you read into R or what and how you export to a spreadsheet.

== To create a spreadsheet from scratch == 

You have some data in `R` that you want to export to Excel.  Here are
the steps you need to follow.  These steps mimic the Apache POI
approach but made idiomatic to `R`.

The steps to create an empty workbook and a sheet with some empty
cells are as follows
{{{ 
wb    <- createWorkbook(type="xlsx")           # create an empty workbook
sheet <- createSheet(wb, sheetName="Sheet1")   # create an empty sheet 
rows  <- createRow(sheet, rowIndex=1:12)       # 12 rows
cells <- createCell(rows, colIndex=1:10)       # 10 columns in each row
}}}
The workbook object `wb`, `sheet` are just a java reference.  
{{{
> wb
[1] "Java-Object{Name: /xl/workbook.xml - Content Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml}"
> sheet
[1] "Java-Object{Name: /xl/worksheets/sheet1.xml - Content Type: application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml}"
}}}

`rows` is a list of java references with names equal to the row
number and `cells` is a matrix of size 20x10 of java references. 
{{{
> head(rows)
$`1`
[1] "Java-Object{<xml-fragment r=\"1\"/>}"

$`2`
[1] "Java-Object{<xml-fragment r=\"2\"/>}"

$`3`
[1] "Java-Object{<xml-fragment r=\"3\"/>}"

$`4`
[1] "Java-Object{<xml-fragment r=\"4\"/>}"

$`5`
[1] "Java-Object{<xml-fragment r=\"5\"/>}"

$`6`
[1] "Java-Object{<xml-fragment r=\"6\"/>}"

> head(cells)
  1 2 3 4 5 6 7 8 9 10
1 ? ? ? ? ? ? ? ? ? ? 
2 ? ? ? ? ? ? ? ? ? ? 
3 ? ? ? ? ? ? ? ? ? ? 
4 ? ? ? ? ? ? ? ? ? ? 
5 ? ? ? ? ? ? ? ? ? ? 
6 ? ? ? ? ? ? ? ? ? ? 
>
}}}

 
For example, to populate the first column with the names of the month
do 
{{{
mapply(setCellValue, cells[1:12,1], month.name)   # set one column 
setCellValue(cells[[2,2]], "I'm a special cell!") # set one cell
}}}  


When you're done populating your spreadsheet, you need to save your
workbook to a file 
{{{ 
saveWorkbook(wb, file="/tmp/test.xlsx")
}}}


You are now done!  The function `write.xlsx` in the high level API,
follows the steps above.


== Customize cell appearance ==

The example shown in the section above just writes content to a
spreadsheet using the default spreadsheet styling.  One of the 
appealing reasons to use a spreadsheet is that you can customize its
appearance.  You can highlight some data, add borders, use different
fonts for important results, etc.  However to customize the appearance
of your spreadsheet programatically is not easy to achieve.  The way
it is done with Apache POI API is verbose and not very intuitive.

Formatting options in Excel are grouped in six categories: !DataFormat,
Alignment, Font, Border, Fill and Protection.  I've decided to emulate
this grouping  Also, inspired by package *`ggplot2`* I've decided to overload
the `+` operator to work with these categories. 

For a workbook object `wb` a call to `CellStyle(wb)` creates the
default (empty) cell style on which you can "add" properties.  I won't
list here all possible combination (see the help) but here are some
examples of what you can do

{{{
cs0 <- CellStyle(wb)   # default/empty style
cs1 <- CellStyle(wb) + 
  Font(name="Courier New", isBold=TRUE)   # add a Font
cs2 <- CellStyle(wb) +    
  Font(name="Courier New", isBold=TRUE) +   # add a Font
  Borders(col="blue", position=c("TOP", "BOTTOM"), pen="BORDER_THICK") +  # add borders    
  Alignment(h="ALIGN_RIGHT")   # add Alignment
}}}

== Details about setCellValue ==
