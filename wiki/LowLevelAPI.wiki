#summary Low-level API description.

<wiki:toc max_depth="3" /> 

Using the low-level functions gives you the ability to control what
you read into R or what and how you export to a spreadsheet.

== To create a spreadsheet from scratch == 

You have some data in `R` that you want to export to Excel.  Here are
the steps you need to follow.  These steps mimic the Apache POI
approach but made idiomatic to `R`.

The steps to create an empty workbook and a sheet with some empty
cells are as follows
{{{ 
wb    <- createWorkbook(type="xlsx") 
sheet <- createSheet(wb, sheetName="Sheet1")
rows  <- createRow(sheet, rowIndex=1:12)
cells <- createCell(rows, colIndex=1:10)
}}}
The workbook object `wb`, `sheet` are just a java reference.  
{{{
> wb
[1] "Java-Object{Name: /xl/workbook.xml - Content Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml}"
> sheet
[1] "Java-Object{Name: /xl/worksheets/sheet1.xml - Content Type: application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml}"
}}}

`rows` is a list of java references with names equal to the row
number and `cells` is a matrix of java references. 
{{{
> head(rows)
$`1`
[1] "Java-Object{<xml-fragment r=\"1\" xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n  <main:c r=\"A1\"/>\r\n  <main:c r=\"B1\"/>\r\n  <main:c r=\"C1\"/>\r\n  <main:c r=\"D1\"/>\r\n  <main:c r=\"E1\"/>\r\n  <main:c r=\"F1\"/>\r\n  <main:c r=\"G1\"/>\r\n  <main:c r=\"H1\"/>\r\n  <main:c r=\"I1\"/>\r\n  <main:c r=\"J1\"/>\r\n</xml-fragment>}"

$`2`
[1] "Java-Object{<xml-fragment r=\"2\" xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n  <main:c r=\"A2\"/>\r\n  <main:c r=\"B2\"/>\r\n  <main:c r=\"C2\"/>\r\n  <main:c r=\"D2\"/>\r\n  <main:c r=\"E2\"/>\r\n  <main:c r=\"F2\"/>\r\n  <main:c r=\"G2\"/>\r\n  <main:c r=\"H2\"/>\r\n  <main:c r=\"I2\"/>\r\n  <main:c r=\"J2\"/>\r\n</xml-fragment>}"

$`3`
[1] "Java-Object{<xml-fragment r=\"3\" xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n  <main:c r=\"A3\"/>\r\n  <main:c r=\"B3\"/>\r\n  <main:c r=\"C3\"/>\r\n  <main:c r=\"D3\"/>\r\n  <main:c r=\"E3\"/>\r\n  <main:c r=\"F3\"/>\r\n  <main:c r=\"G3\"/>\r\n  <main:c r=\"H3\"/>\r\n  <main:c r=\"I3\"/>\r\n  <main:c r=\"J3\"/>\r\n</xml-fragment>}"

$`4`
[1] "Java-Object{<xml-fragment r=\"4\" xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n  <main:c r=\"A4\"/>\r\n  <main:c r=\"B4\"/>\r\n  <main:c r=\"C4\"/>\r\n  <main:c r=\"D4\"/>\r\n  <main:c r=\"E4\"/>\r\n  <main:c r=\"F4\"/>\r\n  <main:c r=\"G4\"/>\r\n  <main:c r=\"H4\"/>\r\n  <main:c r=\"I4\"/>\r\n  <main:c r=\"J4\"/>\r\n</xml-fragment>}"

$`5`
[1] "Java-Object{<xml-fragment r=\"5\" xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n  <main:c r=\"A5\"/>\r\n  <main:c r=\"B5\"/>\r\n  <main:c r=\"C5\"/>\r\n  <main:c r=\"D5\"/>\r\n  <main:c r=\"E5\"/>\r\n  <main:c r=\"F5\"/>\r\n  <main:c r=\"G5\"/>\r\n  <main:c r=\"H5\"/>\r\n  <main:c r=\"I5\"/>\r\n  <main:c r=\"J5\"/>\r\n</xml-fragment>}"

$`6`
[1] "Java-Object{<xml-fragment r=\"6\" xmlns:main=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\">\r\n  <main:c r=\"A6\"/>\r\n  <main:c r=\"B6\"/>\r\n  <main:c r=\"C6\"/>\r\n  <main:c r=\"D6\"/>\r\n  <main:c r=\"E6\"/>\r\n  <main:c r=\"F6\"/>\r\n  <main:c r=\"G6\"/>\r\n  <main:c r=\"H6\"/>\r\n  <main:c r=\"I6\"/>\r\n  <main:c r=\"J6\"/>\r\n</xml-fragment>}"

> head(cells)
  1 2 3 4 5 6 7 8 9 10
1 ? ? ? ? ? ? ? ? ? ? 
2 ? ? ? ? ? ? ? ? ? ? 
3 ? ? ? ? ? ? ? ? ? ? 
4 ? ? ? ? ? ? ? ? ? ? 
5 ? ? ? ? ? ? ? ? ? ? 
6 ? ? ? ? ? ? ? ? ? ? 
>
}}}

 

For example, to create 12 rows use {{{ rows <- createRow(sheet,
rowIndex=1:12). }}} By now, you should suspect that the rows are empty,
that is they have no cells.

To create 10 cells in each row do {{{ cells <- createCell(rows,
colIndex=1:10). }}}  Now your sheet has 20x10 empty cells.  Variable
`cells` is an `R` matrix of java references.

For example, to populate the first column with the names of the month
do {{{ mapply(setCellValue, cells[1:12,1], month.name). }}}  To set only
one cell {{{ setCellValue(cells[[2,2]], "I'm a special cell!").  }}}

To save your workbook to a file {{{ saveWorkbook(wb,
file="/tmp/test.xlsx"). }}}

You are now done!  The function `write.xlsx` follows the steps above. 

== Customize cell appearance ==

The example shown in the section above just writes content to a
spreadsheet using the default spreadsheet styling.  One of the 
appealing reasons to use a spreadsheet is that you can customize its
appearance.  You can highlight some data, add borders, use different
fonts for important results, etc.  However to customize the appearance
of your spreadsheet programatically is not easy to achieve.  The way
it is done with Apache POI API is verbose and not very intuitive.

Formatting options in Excel are grouped in six categories: DataFormat,
Alignment, Font, Border, Fill and Protection.  I've decided to emulate
this.  Also, inspired by package *`ggplot2`* I've decided to overload
the `+` operator to work with these categories. 

For a workbook object `wb` a call to `CellStyle(wb)` creates the
default (empty) cell style on which you can "add" properties.  I won't
list here all possible combination (see the help) but here are some
examples of what you can do

{{{
cs0 <- CellStyle(wb)   # default/empty style
cs1 <- CellStyle(wb) + Font()
cs2 <- CellStyle(wb) + 
  Font() + 
  Borders(col="blue", position=c("TOP", "BOTTOM"), pen="THICK") + 
  Alignment()

}}}

== Details about setCellValue ==
